/* The following code was generated by JFlex 1.4.3 on 30/01/13 17:09 */

/* === USERCODE SECTION === */

package pl.edu.agh.codecomp.lexer;

/* JFlex example */

import java_cup.sym;

/**
* This class is an assembler lexer/scanner
*/

public class Scanner implements IScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\55"+
    "\4\0\1\10\1\50\1\51\1\4\1\32\1\53\1\32\1\21\1\5"+
    "\1\11\11\15\1\13\1\20\1\0\1\52\1\0\1\54\1\0\6\14"+
    "\1\6\1\16\22\6\1\50\1\56\1\51\3\0\1\22\1\26\1\24"+
    "\1\25\1\37\1\42\1\44\1\17\1\31\1\46\1\6\1\23\1\33"+
    "\1\36\1\41\1\30\1\6\1\40\1\27\1\43\1\34\1\35\1\45"+
    "\1\12\1\6\1\47\1\50\1\0\1\51\54\0\1\6\12\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"+
    "\16\0\5\6\7\0\1\6\1\0\1\6\201\0\5\6\1\0\2\6"+
    "\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\10\0\236\6\11\0\46\6\2\0\1\6"+
    "\7\0\47\6\110\0\33\6\5\0\3\6\55\0\53\6\25\0\12\7"+
    "\4\0\2\6\1\0\143\6\1\0\1\6\17\0\2\6\7\0\2\6"+
    "\12\7\3\6\2\0\1\6\20\0\1\6\1\0\36\6\35\0\131\6"+
    "\13\0\1\6\16\0\12\7\41\6\11\0\2\6\4\0\1\6\5\0"+
    "\26\6\4\0\1\6\11\0\1\6\3\0\1\6\27\0\31\6\253\0"+
    "\66\6\3\0\1\6\22\0\1\6\7\0\12\6\4\0\12\7\1\0"+
    "\7\6\1\0\7\6\5\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\3\0\1\6\20\0\1\6\15\0"+
    "\2\6\1\0\3\6\4\0\12\7\2\6\23\0\6\6\4\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\37\0\4\6\1\0\1\6\7\0\12\7\2\0\3\6\20\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\3\0\1\6\22\0\1\6\17\0\2\6\4\0\12\7\25\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\3\0\1\6\36\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6"+
    "\21\0\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6"+
    "\26\0\1\6\25\0\12\7\25\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\3\0\1\6\32\0\2\6\6\0\2\6"+
    "\4\0\12\7\25\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\3\0\1\6\40\0\1\6\1\0\2\6\4\0\12\7"+
    "\1\0\2\6\22\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6"+
    "\20\0\1\6\21\0\2\6\4\0\12\7\12\0\6\6\5\0\22\6"+
    "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\72\0\60\6"+
    "\1\0\2\6\14\0\7\6\11\0\12\7\47\0\2\6\1\0\1\6"+
    "\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6"+
    "\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6"+
    "\1\0\2\6\11\0\1\6\2\0\5\6\1\0\1\6\11\0\12\7"+
    "\2\0\2\6\42\0\1\6\37\0\12\7\26\0\10\6\1\0\44\6"+
    "\33\0\5\6\163\0\53\6\24\0\1\6\12\7\6\0\6\6\4\0"+
    "\4\6\3\0\1\6\3\0\2\6\7\0\3\6\4\0\15\6\14\0"+
    "\1\6\1\0\12\7\6\0\46\6\12\0\53\6\1\0\1\6\3\0"+
    "\u0149\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0"+
    "\103\6\45\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0"+
    "\32\6\5\0\113\6\25\0\15\6\1\0\4\6\16\0\22\6\16\0"+
    "\22\6\16\0\15\6\1\0\3\6\17\0\64\6\43\0\1\6\4\0"+
    "\1\6\3\0\12\7\46\0\12\7\6\0\130\6\10\0\51\6\1\0"+
    "\1\6\5\0\106\6\12\0\35\6\51\0\12\7\36\6\2\0\5\6"+
    "\13\0\54\6\25\0\7\6\10\0\12\7\46\0\27\6\11\0\65\6"+
    "\53\0\12\7\6\0\12\7\15\0\1\6\135\0\57\6\21\0\7\6"+
    "\4\0\12\7\51\0\36\6\15\0\2\6\12\7\6\0\46\6\32\0"+
    "\44\6\34\0\12\7\3\0\3\6\12\7\44\6\153\0\4\6\1\0"+
    "\4\6\16\0\300\6\100\0\u0116\6\2\0\6\6\2\0\46\6\2\0"+
    "\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0"+
    "\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0"+
    "\7\6\164\0\1\6\15\0\1\6\20\0\15\6\145\0\1\6\4\0"+
    "\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0"+
    "\5\6\4\0\1\6\64\0\2\6\u0a7b\0\57\6\1\0\57\6\1\0"+
    "\205\6\6\0\4\6\21\0\46\6\12\0\66\6\11\0\1\6\20\0"+
    "\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\120\0\1\6\u01d5\0"+
    "\2\6\52\0\5\6\5\0\2\6\4\0\126\6\6\0\3\6\1\0"+
    "\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0"+
    "\20\6\u0200\0\u19b6\6\112\0\u51cc\6\64\0\u048d\6\103\0\56\6\2\0"+
    "\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\20\0\31\6\10\0"+
    "\106\6\61\0\11\6\2\0\147\6\2\0\4\6\1\0\2\6\16\0"+
    "\12\6\120\0\10\6\1\0\3\6\1\0\4\6\1\0\27\6\35\0"+
    "\64\6\16\0\62\6\34\0\12\7\30\0\6\6\3\0\1\6\4\0"+
    "\12\7\34\6\12\0\27\6\31\0\35\6\7\0\57\6\34\0\1\6"+
    "\12\7\46\0\51\6\27\0\3\6\1\0\10\6\4\0\12\7\6\0"+
    "\27\6\3\0\1\6\5\0\60\6\1\0\1\6\3\0\2\6\2\0"+
    "\5\6\2\0\1\6\1\0\1\6\30\0\3\6\43\0\6\6\2\0"+
    "\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6\15\0"+
    "\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u012e\6\2\0"+
    "\76\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\0"+
    "\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0"+
    "\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0"+
    "\14\6\164\0\5\6\1\0\207\6\23\0\12\7\7\0\32\6\6\0"+
    "\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0"+
    "\3\6\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\2\3\2\4\1\5\1\1\1\6"+
    "\1\1\1\5\2\7\1\1\1\3\1\2\1\7\1\5"+
    "\3\7\10\5\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\0\1\5\1\21\1\1\1\0"+
    "\1\7\2\5\2\7\1\3\1\21\1\0\1\22\1\7"+
    "\2\5\1\7\1\5\1\7\2\5\1\22\1\7\6\5"+
    "\1\23\6\5\1\24\1\5\1\25\2\5\2\25\1\26"+
    "\1\27\1\30\1\31\1\32\2\0\1\5\1\21\1\4"+
    "\1\33\1\5\1\23\1\4\1\23\1\5\1\23\2\5"+
    "\1\0\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\136\0\353\0\u011a"+
    "\0\u0149\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\136\0\136"+
    "\0\u0524\0\136\0\136\0\136\0\u0553\0\136\0\u0582\0\274"+
    "\0\u05b1\0\u05e0\0\u060f\0\136\0\u063e\0\136\0\u066d\0\u069c"+
    "\0\u06cb\0\u011a\0\u06fa\0\u0729\0\u0292\0\u011a\0\u0758\0\u0787"+
    "\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77"+
    "\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u011a\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u011a\0\136\0\136\0\136\0\136"+
    "\0\136\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0205\0\u011a\0\u0d38"+
    "\0\u011a\0\u011a\0\u0d67\0\u0d96\0\u0dc5\0\u08d0\0\u0df4\0\u0e23"+
    "\0\136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\2\10\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\6\1\32\2\10\1\33\1\16\1\34\1\35\1\16"+
    "\3\10\1\36\1\10\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\3\1\45\2\0\52\45\1\46\1\47\60\0"+
    "\1\50\1\5\1\50\14\0\1\20\37\0\3\50\14\0"+
    "\1\20\42\0\1\51\60\0\1\10\1\52\1\0\1\52"+
    "\1\10\1\53\1\10\1\52\2\10\2\0\10\10\1\0"+
    "\15\10\16\0\1\11\1\54\1\11\3\0\1\11\50\0"+
    "\1\11\1\54\1\17\1\55\2\15\1\17\2\56\2\0"+
    "\1\15\1\0\3\15\10\0\1\15\2\0\1\15\22\0"+
    "\1\10\1\52\1\0\1\52\1\10\1\53\1\10\1\52"+
    "\2\10\2\0\2\10\1\57\5\10\1\0\6\10\1\60"+
    "\6\10\20\0\1\15\1\0\3\15\2\56\2\0\1\15"+
    "\1\0\3\15\10\0\1\15\2\0\1\15\22\0\1\10"+
    "\1\52\1\0\1\61\1\10\1\15\1\16\1\61\2\62"+
    "\2\0\1\16\1\10\3\16\3\10\1\0\4\10\1\16"+
    "\2\10\1\16\5\10\16\0\1\11\1\54\1\17\1\0"+
    "\2\15\1\17\2\56\2\0\1\15\1\0\3\15\10\0"+
    "\1\15\2\0\1\15\14\0\1\20\2\63\54\20\6\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\0\2\64\1\0"+
    "\1\65\10\64\1\0\15\64\15\0\1\10\1\52\1\0"+
    "\1\61\1\66\1\15\1\16\1\61\2\62\2\0\1\16"+
    "\1\66\1\16\1\67\1\16\3\10\1\0\3\10\1\70"+
    "\1\16\2\10\1\16\5\10\15\0\1\10\1\52\1\0"+
    "\1\52\1\10\1\53\1\10\1\52\2\10\2\0\10\10"+
    "\1\0\4\10\1\71\10\10\15\0\1\10\1\52\1\0"+
    "\1\61\1\66\1\15\1\16\1\61\2\62\2\0\1\72"+
    "\1\73\2\16\1\74\3\10\1\0\1\75\3\10\1\16"+
    "\2\10\1\16\2\10\1\76\2\10\15\0\1\10\1\52"+
    "\1\0\1\61\1\66\1\15\1\16\1\61\2\62\2\0"+
    "\1\16\1\10\3\16\2\10\1\77\1\0\4\10\1\100"+
    "\2\10\1\16\5\10\15\0\1\10\1\52\1\0\1\61"+
    "\1\66\1\15\1\16\1\61\2\62\2\0\1\16\1\10"+
    "\3\16\1\10\1\66\1\10\1\0\4\10\1\16\2\10"+
    "\1\16\5\10\15\0\1\10\1\52\1\0\1\52\1\10"+
    "\1\53\1\10\1\52\2\10\2\0\1\101\3\10\1\102"+
    "\1\10\2\66\1\0\1\10\1\102\6\10\1\73\4\10"+
    "\15\0\1\10\1\52\1\0\1\52\1\10\1\53\1\10"+
    "\1\52\2\10\2\0\10\10\1\0\1\10\1\103\4\10"+
    "\1\104\6\10\15\0\1\10\1\52\1\0\1\52\1\10"+
    "\1\53\1\10\1\52\2\10\2\0\3\10\1\105\2\10"+
    "\1\66\1\10\1\0\1\106\2\10\1\107\11\10\15\0"+
    "\1\10\1\52\1\0\1\52\1\10\1\53\1\10\1\52"+
    "\2\10\2\0\10\10\1\0\1\10\1\110\4\10\1\111"+
    "\6\10\15\0\1\10\1\52\1\0\1\52\1\10\1\53"+
    "\1\10\1\52\2\10\2\0\10\10\1\0\4\10\1\112"+
    "\1\10\1\113\6\10\15\0\1\10\1\52\1\0\1\52"+
    "\1\10\1\53\1\10\1\52\2\10\2\0\2\10\1\101"+
    "\5\10\1\0\4\10\1\114\1\10\1\101\6\10\15\0"+
    "\1\10\1\52\1\0\1\52\1\10\1\53\1\10\1\52"+
    "\2\10\2\0\10\10\1\0\1\10\1\115\3\10\1\116"+
    "\7\10\15\0\1\10\1\52\1\0\1\52\1\10\1\53"+
    "\1\10\1\52\2\10\2\0\2\10\1\117\3\10\1\120"+
    "\1\10\1\0\1\121\2\10\1\122\1\123\7\10\1\124"+
    "\61\0\1\125\4\0\1\45\2\0\52\45\40\0\1\126"+
    "\1\0\1\127\2\0\1\130\11\0\1\131\1\0\4\132"+
    "\1\133\52\132\7\0\1\52\1\0\1\52\1\0\1\53"+
    "\1\0\1\52\54\0\1\53\54\0\1\15\1\0\3\15"+
    "\4\0\1\15\1\0\3\15\10\0\1\15\2\0\1\15"+
    "\22\0\1\10\1\52\1\0\1\52\1\10\1\53\1\10"+
    "\1\52\1\10\1\134\2\0\10\10\1\0\15\10\15\0"+
    "\1\10\1\52\1\0\1\52\1\10\1\53\1\10\1\52"+
    "\2\10\2\0\10\10\1\0\5\10\1\116\7\10\16\0"+
    "\1\52\1\0\1\61\1\0\2\15\1\61\2\56\2\0"+
    "\1\15\1\0\3\15\10\0\1\15\2\0\1\15\15\0"+
    "\2\63\62\0\1\64\1\135\1\0\1\135\1\64\1\0"+
    "\1\64\1\135\2\64\2\0\10\64\1\0\15\64\15\0"+
    "\1\10\1\52\1\0\1\61\1\10\1\15\1\16\1\61"+
    "\2\62\2\0\1\16\1\10\1\16\1\136\1\16\3\10"+
    "\1\0\4\10\1\16\2\10\1\16\5\10\15\0\1\10"+
    "\1\52\1\0\1\52\1\10\1\53\1\10\1\52\2\10"+
    "\2\0\3\10\1\116\4\10\1\0\15\10\15\0\1\10"+
    "\1\52\1\0\1\52\1\10\1\53\1\10\1\52\2\10"+
    "\2\0\1\137\7\10\1\0\15\10\15\0\1\10\1\52"+
    "\1\0\1\61\1\10\1\15\1\16\1\61\2\62\2\0"+
    "\1\16\1\140\3\16\3\10\1\0\4\10\1\16\2\10"+
    "\1\16\5\10\15\0\1\10\1\52\1\0\1\52\1\10"+
    "\1\53\1\10\1\52\2\10\2\0\2\10\2\141\3\10"+
    "\1\141\1\0\15\10\15\0\1\10\1\52\1\0\1\61"+
    "\1\10\1\15\1\16\1\61\2\62\2\0\1\16\1\10"+
    "\3\16\3\10\1\0\4\10\1\16\2\10\1\16\2\10"+
    "\1\141\2\10\15\0\1\10\1\52\1\0\1\52\1\10"+
    "\1\53\1\10\1\52\2\10\2\0\2\10\1\141\3\10"+
    "\1\142\1\10\1\0\15\10\15\0\1\10\1\52\1\0"+
    "\1\52\1\10\1\53\1\10\1\52\2\10\2\0\3\10"+
    "\1\143\4\10\1\0\15\10\15\0\1\10\1\52\1\0"+
    "\1\52\1\10\1\53\1\10\1\52\2\10\2\0\10\10"+
    "\1\0\2\10\1\142\12\10\15\0\1\10\1\52\1\0"+
    "\1\61\1\10\1\15\1\16\1\61\2\62\2\0\1\16"+
    "\1\10\1\136\2\16\3\10\1\0\4\10\1\16\2\10"+
    "\1\16\5\10\15\0\1\10\1\52\1\0\1\52\1\10"+
    "\1\53\1\10\1\52\2\10\2\0\1\10\1\142\6\10"+
    "\1\0\5\10\1\142\7\10\15\0\1\10\1\52\1\0"+
    "\1\52\1\10\1\53\1\10\1\52\2\10\2\0\4\10"+
    "\1\142\3\10\1\0\15\10\15\0\1\10\1\52\1\0"+
    "\1\52\1\10\1\53\1\10\1\52\2\10\2\0\5\10"+
    "\1\144\2\10\1\0\15\10\15\0\1\10\1\52\1\0"+
    "\1\52\1\10\1\53\1\10\1\52\2\10\2\0\6\10"+
    "\1\145\1\10\1\0\15\10\15\0\1\10\1\52\1\0"+
    "\1\52\1\10\1\53\1\10\1\52\2\10\2\0\7\10"+
    "\1\146\1\0\15\10\15\0\1\10\1\52\1\0\1\52"+
    "\1\10\1\53\1\10\1\52\2\10\2\0\10\10\1\0"+
    "\1\10\1\110\13\10\15\0\1\10\1\52\1\0\1\52"+
    "\1\10\1\53\1\10\1\52\2\10\2\0\2\10\1\142"+
    "\5\10\1\0\10\10\1\137\4\10\15\0\1\10\1\52"+
    "\1\0\1\52\1\10\1\53\1\10\1\52\2\10\2\0"+
    "\1\10\1\142\6\10\1\0\15\10\15\0\1\10\1\52"+
    "\1\0\1\52\1\10\1\53\1\10\1\52\2\10\2\0"+
    "\10\10\1\0\2\10\1\141\12\10\15\0\1\10\1\52"+
    "\1\0\1\52\1\10\1\53\1\10\1\52\2\10\2\0"+
    "\10\10\1\0\11\10\1\116\3\10\15\0\1\10\1\52"+
    "\1\0\1\52\1\10\1\53\1\10\1\52\2\10\2\0"+
    "\6\10\1\137\1\10\1\0\10\10\1\116\4\10\15\0"+
    "\1\10\1\52\1\0\1\52\1\10\1\53\1\10\1\52"+
    "\2\10\2\0\10\10\1\0\10\10\1\124\4\10\15\0"+
    "\1\10\1\52\1\0\1\52\1\10\1\53\1\10\1\52"+
    "\2\10\2\0\10\10\1\0\10\10\1\141\4\10\15\0"+
    "\1\10\1\52\1\0\1\52\1\147\1\53\1\10\1\52"+
    "\2\10\2\0\10\10\1\0\15\10\15\0\1\10\1\52"+
    "\1\0\1\52\1\10\1\53\1\10\1\52\2\10\2\0"+
    "\10\10\1\0\4\10\1\124\1\10\1\124\6\10\15\0"+
    "\1\10\1\52\1\0\1\52\1\10\1\53\1\10\1\52"+
    "\2\10\2\0\6\10\1\124\1\10\1\0\15\10\15\0"+
    "\1\10\1\52\1\0\1\52\1\10\1\53\1\10\1\52"+
    "\2\10\2\0\6\10\1\124\1\10\1\0\4\10\1\124"+
    "\7\10\1\124\15\0\1\10\1\52\1\0\1\52\1\10"+
    "\1\53\1\10\1\52\2\10\2\0\2\10\1\117\5\10"+
    "\1\0\15\10\7\0\4\132\1\150\52\132\4\0\1\133"+
    "\1\151\57\0\1\10\1\52\1\0\1\52\1\10\1\53"+
    "\1\10\1\52\2\10\2\0\10\10\1\0\11\10\1\141"+
    "\3\10\16\0\1\135\1\0\1\135\3\0\1\135\47\0"+
    "\1\10\1\52\1\0\1\52\1\10\1\53\1\10\1\52"+
    "\2\10\2\0\1\10\1\124\6\10\1\0\15\10\15\0"+
    "\1\10\1\52\1\0\1\52\1\10\1\53\1\10\1\52"+
    "\2\10\2\0\10\10\1\0\4\10\1\141\10\10\15\0"+
    "\1\10\1\52\1\0\1\52\1\10\1\53\1\10\1\52"+
    "\1\10\1\145\2\0\10\10\1\0\15\10\15\0\1\10"+
    "\1\52\1\0\1\52\1\10\1\53\1\10\1\52\2\10"+
    "\2\0\1\141\7\10\1\0\7\10\1\141\5\10\15\0"+
    "\1\10\1\52\1\0\1\52\1\10\1\53\1\10\1\52"+
    "\2\10\2\0\10\10\1\0\14\10\1\124\7\0\4\132"+
    "\1\150\1\151\51\132";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3666];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\2\1\1\11\30\1\2\11\1\1"+
    "\3\11\1\1\1\11\1\1\2\0\2\1\1\11\1\0"+
    "\1\11\6\1\1\0\37\1\5\11\2\0\14\1\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

StringBuffer string = new StringBuffer();

private String symbol(int code, String label) {
	return code + ": " + label;
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1684) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return symbol(sym.NONTERMINAL, "HexNumber");
          }
        case 28: break;
        case 23: 
          { string.append('\n');
          }
        case 29: break;
        case 4: 
          { return symbol(sym.ACTION, "Arithmetic");
          }
        case 30: break;
        case 9: 
          { return symbol(sym.RBRACK, "RBrace");
          }
        case 31: break;
        case 6: 
          { return symbol(sym.NONTERMINAL, "APOSTROPHE");
          }
        case 32: break;
        case 15: 
          { yybegin(YYINITIAL);
						  return symbol(sym.CODE_STRING, string.toString());
          }
        case 33: break;
        case 27: 
          { return symbol(sym.ACTION, "Misc");
          }
        case 34: break;
        case 5: 
          { return symbol(sym.ID, "ID");
          }
        case 35: break;
        case 2: 
          { System.err.println("Illegal character <"+ yytext() +">");
          }
        case 36: break;
        case 19: 
          { return symbol(sym.ACTION, "Transfer");
          }
        case 37: break;
        case 16: 
          { string.append('\\');
          }
        case 38: break;
        case 20: 
          { return symbol(sym.ACTION, "Logic");
          }
        case 39: break;
        case 13: 
          { string.setLength(0); yybegin(STRING);
          }
        case 40: break;
        case 11: 
          { return symbol(sym.COMMA, "COMMA");
          }
        case 41: break;
        case 10: 
          { return symbol(sym.ACTION, "Equals");
          }
        case 42: break;
        case 24: 
          { string.append('\r');
          }
        case 43: break;
        case 22: 
          { return symbol(sym.ACTION, "EQEQ");
          }
        case 44: break;
        case 21: 
          { return symbol(sym.ACTION, "Jump");
          }
        case 45: break;
        case 12: 
          { return symbol(sym.NONTERMINAL, "QMARK");
          }
        case 46: break;
        case 14: 
          { string.append(yytext());
          }
        case 47: break;
        case 18: 
          { return symbol(sym.TERMINAL, "Register");
          }
        case 48: break;
        case 17: 
          { return symbol(sym.NONTERMINAL, "Label");
          }
        case 49: break;
        case 26: 
          { string.append('\"');
          }
        case 50: break;
        case 1: 
          { return symbol(sym.NONTERMINAL, "Number");
          }
        case 51: break;
        case 8: 
          { return symbol(sym.LBRACK, "LBrace");
          }
        case 52: break;
        case 25: 
          { string.append('\t');
          }
        case 53: break;
        case 3: 
          { /* ignore */
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return null; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
